
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fndkivztnbkzuqosmbdx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuZGtpdnp0bmJrenVxb3NtYmR4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc5NDM0NTIsImV4cCI6MjA2MzUxOTQ1Mn0.3ZvbeN7DNIOLGX-bjTmhnINWngILIM_DyYRffRM4td4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Tipos de operação para o sistema de copy trading
export type TradeOperation = {
  traderId: string;
  tradeAmount: number;
  tradePercentage: number; // Percentual do capital do trader investido
  tradePair: string;
  tradeDirection: 'buy' | 'sell';
  entryPrice: number;
  targetPrice: number;
  stopLossPrice: number;
};

// Função para calcular o valor proporcional para o seguidor com base na operação do master
export const calculateProportionalTradeAmount = (
  masterTradeAmount: number, 
  masterTotalBalance: number, 
  followerTotalBalance: number
): number => {
  // Calcular a porcentagem do capital do master usada na operação
  const masterTradePercentage = (masterTradeAmount / masterTotalBalance) * 100;
  
  // Aplicar a mesma porcentagem no capital do seguidor
  const followerTradeAmount = (followerTotalBalance * masterTradePercentage) / 100;
  
  // Retornar o valor arredondado com 4 casas decimais (adequado para criptomoedas)
  return Number(followerTradeAmount.toFixed(4));
};

// Interface para configurações de saldo mínimo
export interface BalanceRequirements {
  minActiveBalance: number;   // Saldo mínimo para conta ser considerada ativa
  minMaintenanceBalance: number;  // Saldo mínimo para manter a conta operacional
}

// Função para verificar se um usuário está ativo com base no saldo
export const isUserActive = async (userId: string): Promise<boolean> => {
  try {
    // Chamada para a função RPC do Supabase
    const { data, error } = await supabase.rpc('is_user_active', { user_id_param: userId });
    
    if (error) {
      console.error('Erro ao verificar status de atividade do usuário:', error);
      return false;
    }
    
    return data || false;
  } catch (err) {
    console.error('Erro ao chamar função de verificação de atividade:', err);
    return false;
  }
};

// Função para obter requisitos de saldo do sistema
export const getBalanceRequirements = async (): Promise<BalanceRequirements> => {
  try {
    const { data, error } = await supabase
      .from('system_settings')
      .select('min_active_balance, min_maintenance_balance')
      .single();
    
    if (error) {
      console.error('Erro ao obter requisitos de saldo:', error);
      return {
        minActiveBalance: 0.5,
        minMaintenanceBalance: 0.1
      };
    }
    
    return {
      minActiveBalance: data.min_active_balance,
      minMaintenanceBalance: data.min_maintenance_balance
    };
  } catch (err) {
    console.error('Erro ao buscar requisitos de saldo:', err);
    return {
      minActiveBalance: 0.5,
      minMaintenanceBalance: 0.1
    };
  }
};
